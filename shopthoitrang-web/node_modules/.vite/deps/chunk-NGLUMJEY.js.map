{
  "version": 3,
  "sources": ["../../antd/es/form/hooks/useVariants.js"],
  "sourcesContent": ["import * as React from 'react';\nimport { VariantContext } from '../context';\nimport { ConfigContext, Variants } from '../../config-provider';\n/**\n * Compatible for legacy `bordered` prop.\n */\nconst useVariant = (component, variant, legacyBordered = undefined) => {\n  var _a, _b;\n  const {\n    variant: configVariant,\n    [component]: componentConfig\n  } = React.useContext(ConfigContext);\n  const ctxVariant = React.useContext(VariantContext);\n  const configComponentVariant = componentConfig === null || componentConfig === void 0 ? void 0 : componentConfig.variant;\n  let mergedVariant;\n  if (typeof variant !== 'undefined') {\n    mergedVariant = variant;\n  } else if (legacyBordered === false) {\n    mergedVariant = 'borderless';\n  } else {\n    // form variant > component global variant > global variant\n    mergedVariant = (_b = (_a = ctxVariant !== null && ctxVariant !== void 0 ? ctxVariant : configComponentVariant) !== null && _a !== void 0 ? _a : configVariant) !== null && _b !== void 0 ? _b : 'outlined';\n  }\n  const enableVariantCls = Variants.includes(mergedVariant);\n  return [mergedVariant, enableVariantCls];\n};\nexport default useVariant;"],
  "mappings": ";;;;;;;;;;;;;;;AAAA,YAAuB;AAMvB,IAAM,aAAa,CAAC,WAAW,SAAS,iBAAiB,WAAc;AACrE,MAAI,IAAI;AACR,QAAM;AAAA,IACJ,SAAS;AAAA,IACT,CAAC,SAAS,GAAG;AAAA,EACf,IAAU,iBAAW,aAAa;AAClC,QAAM,aAAmB,iBAAW,cAAc;AAClD,QAAM,yBAAyB,oBAAoB,QAAQ,oBAAoB,SAAS,SAAS,gBAAgB;AACjH,MAAI;AACJ,MAAI,OAAO,YAAY,aAAa;AAClC,oBAAgB;AAAA,EAClB,WAAW,mBAAmB,OAAO;AACnC,oBAAgB;AAAA,EAClB,OAAO;AAEL,qBAAiB,MAAM,KAAK,eAAe,QAAQ,eAAe,SAAS,aAAa,4BAA4B,QAAQ,OAAO,SAAS,KAAK,mBAAmB,QAAQ,OAAO,SAAS,KAAK;AAAA,EACnM;AACA,QAAM,mBAAmB,SAAS,SAAS,aAAa;AACxD,SAAO,CAAC,eAAe,gBAAgB;AACzC;AACA,IAAO,sBAAQ;",
  "names": []
}

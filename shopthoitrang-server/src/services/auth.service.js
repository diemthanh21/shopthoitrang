const bcrypt = require('bcrypt');
const { generateToken } = require('../utils/jwt');
const TaiKhoanKhachHangRepository = require('../repositories/taikhoankhachhang.repository');
const TaiKhoanNhanVienRepository = require('../repositories/taikhoannhanvien.repository');

const SALT_ROUNDS = 10;

const AuthService = {
  /**
   * Hash m·∫≠t kh·∫©u
   */
  async hashPassword(plainPassword) {
    return await bcrypt.hash(plainPassword, SALT_ROUNDS);
  },

  /**
   * So s√°nh m·∫≠t kh·∫©u (h·ªó tr·ª£ c·∫£ plain text v√† hashed)
   */
  async comparePassword(plainPassword, storedPassword) {
    // Ki·ªÉm tra n·∫øu password l√† null ho·∫∑c undefined
    if (!storedPassword) {
      return false;
    }

    // Ki·ªÉm tra n·∫øu password l√† plain text (ch∆∞a hash)
    // Bcrypt hash lu√¥n b·∫Øt ƒë·∫ßu v·ªõi $2a$, $2b$, ho·∫∑c $2y$ v√† c√≥ ƒë·ªô d√†i >= 60
    const isBcryptHash = storedPassword.startsWith('$2a$') || 
                         storedPassword.startsWith('$2b$') || 
                         storedPassword.startsWith('$2y$');

    if (!isBcryptHash) {
      // Password ch∆∞a ƒë∆∞·ª£c hash (plain text) - so s√°nh tr·ª±c ti·∫øp
      console.warn('‚ö†Ô∏è  WARNING: Plain text password detected. Please migrate to hashed passwords!');
      return plainPassword === storedPassword;
    }

    // Password ƒë√£ ƒë∆∞·ª£c hash - s·ª≠ d·ª•ng bcrypt compare
    return await bcrypt.compare(plainPassword, storedPassword);
  },

  /**
   * ƒêƒÉng k√Ω kh√°ch h√†ng m·ªõi
   */
  async registerCustomer(payload) {
    const { email, matkhau, hoten, sodienthoai } = payload;

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
    const existingCustomers = await TaiKhoanKhachHangRepository.getAll({ email });
    if (existingCustomers.length > 0) {
      throw new Error('Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng');
    }

    // Hash m·∫≠t kh·∫©u
    const hashedPassword = await this.hashPassword(matkhau);

    // T·∫°o t√†i kho·∫£n m·ªõi
    const newCustomer = await TaiKhoanKhachHangRepository.create({
      email,
      matkhau: hashedPassword,
      hoten,
      sodienthoai,
      danghoatdong: true,
      ngaytao: new Date().toISOString()
    });

    // T·∫°o JWT token
    const token = generateToken({
      makhachhang: newCustomer.makhachhang,
      email: newCustomer.email,
      role: 'customer'
    });

    return {
      user: {
        makhachhang: newCustomer.makhachhang,
        email: newCustomer.email,
        hoten: newCustomer.hoten,
        sodienthoai: newCustomer.sodienthoai
      },
      token
    };
  },

  /**
   * ƒêƒÉng nh·∫≠p kh√°ch h√†ng
   */
  async loginCustomer(email, matkhau) {
    // T√¨m kh√°ch h√†ng theo email
    const customers = await TaiKhoanKhachHangRepository.getAll({ email });
    
    if (customers.length === 0) {
      throw new Error('Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng');
    }

    const customer = customers[0];

    // Ki·ªÉm tra t√†i kho·∫£n c√≥ ƒëang ho·∫°t ƒë·ªông
    if (customer.dangHoatDong === false || customer.danghoatdong === false) {
      throw new Error('T√†i kho·∫£n ƒë√£ b·ªã v√¥ hi·ªáu h√≥a');
    }

    // L·∫•y password t·ª´ model (model chuy·ªÉn pass -> matKhau)
    const storedPassword = customer.matKhau || customer.pass;
    
    if (!storedPassword) {
      throw new Error('T√†i kho·∫£n ch∆∞a c√≥ m·∫≠t kh·∫©u');
    }
    
    // Ki·ªÉm tra m·∫≠t kh·∫©u
    const isPasswordValid = await this.comparePassword(matkhau, storedPassword);
    if (!isPasswordValid) {
      throw new Error('Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng');
    }

    // N·∫øu password l√† plain text, t·ª± ƒë·ªông hash v√† c·∫≠p nh·∫≠t
    const isPlainText = !storedPassword.startsWith('$2a$') && 
                        !storedPassword.startsWith('$2b$') && 
                        !storedPassword.startsWith('$2y$');
    
    if (isPlainText) {
      console.log(`üîÑ Auto-migrating password for customer: ${email}`);
      const hashedPassword = await this.hashPassword(matkhau);
      await TaiKhoanKhachHangRepository.update(customer.maKhachHang || customer.makhachhang, {
        pass: hashedPassword
      });
    }

    // T·∫°o JWT token
    const token = generateToken({
      makhachhang: customer.maKhachHang || customer.makhachhang,
      email: customer.email,
      role: 'customer'
    });

    return {
      user: {
        makhachhang: customer.maKhachHang || customer.makhachhang,
        email: customer.email,
        hoten: customer.hoTen || customer.hoten,
        sodienthoai: customer.soDienThoai || customer.sodienthoai,
        diachi: customer.diachi
      },
      token
    };
  },

  /**
   * ƒêƒÉng nh·∫≠p nh√¢n vi√™n
   */
  async loginEmployee(tendangnhap, matkhau) {
    // T√¨m nh√¢n vi√™n theo t√™n ƒëƒÉng nh·∫≠p
    const employee = await TaiKhoanNhanVienRepository.getByUsername(tendangnhap);
    
    if (!employee) {
      throw new Error('T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng');
    }

    // L·∫•y password t·ª´ model (model chuy·ªÉn matkhau -> matKhau)
    const storedPassword = employee.matKhau || employee.matkhau;
    
    if (!storedPassword) {
      throw new Error('T√†i kho·∫£n ch∆∞a c√≥ m·∫≠t kh·∫©u');
    }
    
    // Ki·ªÉm tra m·∫≠t kh·∫©u
    const isPasswordValid = await this.comparePassword(matkhau, storedPassword);
    if (!isPasswordValid) {
      throw new Error('T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng');
    }

    // N·∫øu password l√† plain text, t·ª± ƒë·ªông hash v√† c·∫≠p nh·∫≠t
    const isPlainText = !storedPassword.startsWith('$2a$') && 
                        !storedPassword.startsWith('$2b$') && 
                        !storedPassword.startsWith('$2y$');
    
    if (isPlainText) {
      console.log(`üîÑ Auto-migrating password for employee: ${tendangnhap}`);
      const hashedPassword = await this.hashPassword(matkhau);
      await TaiKhoanNhanVienRepository.update(employee.maNhanVien || employee.manhanvien, {
        matkhau: hashedPassword
      });
    }

    // T·∫°o JWT token v·ªõi quy·ªÅn nh√¢n vi√™n
    const token = generateToken({
      manhanvien: employee.maNhanVien || employee.manhanvien,
      tendangnhap: employee.tenDangNhap || employee.tendangnhap,
      role: 'employee'
    });

    return {
      user: {
        manhanvien: employee.maNhanVien || employee.manhanvien,
        tendangnhap: employee.tenDangNhap || employee.tendangnhap
      },
      token
    };
  },

  /**
   * ƒê·ªïi m·∫≠t kh·∫©u kh√°ch h√†ng
   */
  async changeCustomerPassword(makhachhang, matkhaucu, matkhaumoi) {
    const customer = await TaiKhoanKhachHangRepository.getById(makhachhang);
    
    if (!customer) {
      throw new Error('Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n');
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u c≈©
    const isPasswordValid = await this.comparePassword(matkhaucu, customer.matkhau);
    if (!isPasswordValid) {
      throw new Error('M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng');
    }

    // Hash m·∫≠t kh·∫©u m·ªõi
    const hashedNewPassword = await this.hashPassword(matkhaumoi);

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
    await TaiKhoanKhachHangRepository.update(makhachhang, {
      matkhau: hashedNewPassword
    });

    return { message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng' };
  },

  /**
   * ƒê·ªïi m·∫≠t kh·∫©u nh√¢n vi√™n
   */
  async changeEmployeePassword(manhanvien, matkhaucu, matkhaumoi) {
    const employee = await TaiKhoanNhanVienRepository.getById(manhanvien);
    
    if (!employee) {
      throw new Error('Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n');
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u c≈©
    const isPasswordValid = await this.comparePassword(matkhaucu, employee.matkhau);
    if (!isPasswordValid) {
      throw new Error('M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng');
    }

    // Hash m·∫≠t kh·∫©u m·ªõi
    const hashedNewPassword = await this.hashPassword(matkhaumoi);

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
    await TaiKhoanNhanVienRepository.update(manhanvien, {
      matkhau: hashedNewPassword
    });

    return { message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng' };
  }
};

module.exports = AuthService;

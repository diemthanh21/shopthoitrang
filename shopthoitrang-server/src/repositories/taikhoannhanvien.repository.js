const { createClient } = require('@supabase/supabase-js');
const TaiKhoanNhanVien = require('../models/taikhoannhanvien.model');

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_KEY
);

const TaiKhoanNhanVienRepository = {
  // üîê ƒêƒÉng nh·∫≠p
  async findByCredentials(tenDangNhap, matKhau) {
    try {
      const { data, error } = await supabase
        .from('taikhoannhanvien')
        .select('*')
        .eq('tendangnhap', tenDangNhap) // ‚úÖ T√™n c·ªôt ch·ªØ th∆∞·ªùng
        .eq('matkhau', matKhau)         // ‚úÖ T√™n c·ªôt ch·ªØ th∆∞·ªùng
        .eq('danghoatdong', true)       // ‚úÖ T√™n c·ªôt ch·ªØ th∆∞·ªùng
        .single();

      if (error) {
        console.error('‚ùå L·ªói query:', error);
        return null;
      }

      if (!data) {
        console.log('‚ùå Kh√¥ng t√¨m th·∫•y user v·ªõi:', { tenDangNhap, matKhau });
        return null;
      }

      console.log('‚úÖ T√¨m th·∫•y user:', data);
      return new TaiKhoanNhanVien(data);
    } catch (err) {
      console.error('‚ùå Exception:', err);
      return null;
    }
  },

  // ‚úÖ T·∫°o m·ªõi - S·ª¨A L·ªñI
  async create(taiKhoan) {
    try {
      const { data, error } = await supabase
        .from('taikhoannhanvien')
        .insert([{
          manhanvien: taiKhoan.manhanvien || taiKhoan.MANHANVIEN,
          tendangnhap: taiKhoan.tendangnhap || taiKhoan.TENDANGNHAP,
          matkhau: taiKhoan.matkhau || taiKhoan.MATKHAU,
          danghoatdong: taiKhoan.danghoatdong !== undefined ? taiKhoan.danghoatdong : true
        }])
        .select()
        .single();

      if (error) {
        console.error('‚ùå L·ªói t·∫°o t√†i kho·∫£n:', error);
        return null;
      }

      return new TaiKhoanNhanVien(data);
    } catch (err) {
      console.error('‚ùå Exception:', err);
      return null;
    }
  },

  // üì• L·∫•y t·∫•t c·∫£ t√†i kho·∫£n nh√¢n vi√™n - S·ª¨A L·ªñI
  async getAll() {
    try {
      const { data, error } = await supabase
        .from('taikhoannhanvien')
        .select('*');

      if (error) {
        console.error('‚ùå L·ªói l·∫•y danh s√°ch:', error);
        return [];
      }

      return data.map(row => new TaiKhoanNhanVien(row));
    } catch (err) {
      console.error('‚ùå Exception:', err);
      return [];
    }
  },

  // üîç L·∫•y theo m√£ nh√¢n vi√™n - S·ª¨A L·ªñI
  async getById(maNhanVien) {
    try {
      const { data, error } = await supabase
        .from('taikhoannhanvien')
        .select('*')
        .eq('manhanvien', maNhanVien)
        .single();

      if (error || !data) {
        console.error('‚ùå Kh√¥ng t√¨m th·∫•y:', { maNhanVien, error });
        return null;
      }

      return new TaiKhoanNhanVien(data);
    } catch (err) {
      console.error('‚ùå Exception:', err);
      return null;
    }
  },

  // ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin - S·ª¨A L·ªñI
  async update(maNhanVien, updatedFields) {
    try {
      // Chuy·ªÉn ƒë·ªïi t√™n field v·ªÅ lowercase
      const normalizedFields = {};
      Object.keys(updatedFields).forEach(key => {
        const lowerKey = key.toLowerCase();
        normalizedFields[lowerKey] = updatedFields[key];
      });

      const { data, error } = await supabase
        .from('taikhoannhanvien')
        .update(normalizedFields)
        .eq('manhanvien', maNhanVien)
        .select()
        .single();

      if (error || !data) {
        console.error('‚ùå L·ªói c·∫≠p nh·∫≠t:', error);
        return null;
      }

      return new TaiKhoanNhanVien(data);
    } catch (err) {
      console.error('‚ùå Exception:', err);
      return null;
    }
  },

  // üóëÔ∏è Xo√° m·ªÅm (set danghoatdong = false) - S·ª¨A L·ªñI
  async delete(maNhanVien) {
    try {
      const { data, error } = await supabase
        .from('taikhoannhanvien')
        .update({ danghoatdong: false })
        .eq('manhanvien', maNhanVien)
        .select()
        .single();

      if (error || !data) {
        console.error('‚ùå L·ªói x√≥a:', error);
        return null;
      }

      return new TaiKhoanNhanVien(data);
    } catch (err) {
      console.error('‚ùå Exception:', err);
      return null;
    }
  }
};

module.exports = TaiKhoanNhanVienRepository;
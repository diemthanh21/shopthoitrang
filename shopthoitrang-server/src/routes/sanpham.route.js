const express = require('express');
const router = express.Router();
const controller = require('../controllers/sanpham.controller');
const authenticateToken = require('../middlewares/auth.middleware');

/**
 * @swagger
 * tags:
 *   - name: S·∫£n ph·∫©m
 *     description: Qu·∫£n l√Ω s·∫£n ph·∫©m trong h·ªá th·ªëng
 */

// üîê √Åp d·ª•ng middleware cho to√†n b·ªô route
router.use(authenticateToken);

/**
 * @swagger
 * /api/sanpham/danhmuc/{maDanhMuc}:
 *   get:
 *     summary: T√¨m s·∫£n ph·∫©m theo m√£ danh m·ª•c
 *     tags: [S·∫£n ph·∫©m]
 *     parameters:
 *       - in: path
 *         name: maDanhMuc
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Danh s√°ch s·∫£n ph·∫©m theo danh m·ª•c
 */
router.get('/danhmuc/:maDanhMuc', controller.findByDanhMuc);

/**
 * @swagger
 * /api/sanpham/thuonghieu/{maThuongHieu}:
 *   get:
 *     summary: T√¨m s·∫£n ph·∫©m theo m√£ th∆∞∆°ng hi·ªáu
 *     tags: [S·∫£n ph·∫©m]
 *     parameters:
 *       - in: path
 *         name: maThuongHieu
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Danh s√°ch s·∫£n ph·∫©m theo th∆∞∆°ng hi·ªáu
 */
router.get('/thuonghieu/:maThuongHieu', controller.findByThuongHieu);

/**
 * @swagger
 * /api/sanpham/trangthai/{trangThai}:
 *   get:
 *     summary: T√¨m s·∫£n ph·∫©m theo tr·∫°ng th√°i
 *     tags: [S·∫£n ph·∫©m]
 *     parameters:
 *       - in: path
 *         name: trangThai
 *         required: true
 *         schema:
 *           type: boolean
 *     responses:
 *       200:
 *         description: Danh s√°ch s·∫£n ph·∫©m theo tr·∫°ng th√°i
 */
router.get('/trangthai/:trangThai', controller.findByTrangThai);

/**
 * @swagger
 * /api/sanpham:
 *   get:
 *     summary: L·∫•y danh s√°ch t·∫•t c·∫£ s·∫£n ph·∫©m
 *     tags: [S·∫£n ph·∫©m]
 *     responses:
 *       200:
 *         description: Th√†nh c√¥ng
 */
router.get('/', controller.getAll);

/**
 * @swagger
 * /api/sanpham/{maSanPham}:
 *   get:
 *     summary: L·∫•y th√¥ng tin s·∫£n ph·∫©m theo m√£
 *     tags: [S·∫£n ph·∫©m]
 *     parameters:
 *       - in: path
 *         name: maSanPham
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Th√†nh c√¥ng
 *       404:
 *         description: Kh√¥ng t√¨m th·∫•y
 */
router.get('/:maSanPham', controller.getById);

/**
 * @swagger
 * /api/sanpham:
 *   post:
 *     summary: T·∫°o s·∫£n ph·∫©m m·ªõi
 *     tags: [S·∫£n ph·∫©m]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - MASANPHAM
 *               - TENSANPHAM
 *               - MADANHMUC
 *               - MATHUONGHIEU
 *             properties:
 *               MASANPHAM:
 *                 type: string
 *               TENSANPHAM:
 *                 type: string
 *               MADANHMUC:
 *                 type: string
 *               MATHUONGHIEU:
 *                 type: string
 *               TRANGTHAI:
 *                 type: boolean
 *     responses:
 *       201:
 *         description: T·∫°o th√†nh c√¥ng
 *       400:
 *         description: Th·∫•t b·∫°i
 */
router.post('/', controller.create);

/**
 * @swagger
 * /api/sanpham/{maSanPham}:
 *   put:
 *     summary: C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m
 *     tags: [S·∫£n ph·∫©m]
 *     parameters:
 *       - in: path
 *         name: maSanPham
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               TENSANPHAM:
 *                 type: string
 *               MADANHMUC:
 *                 type: string
 *               MATHUONGHIEU:
 *                 type: string
 *               TRANGTHAI:
 *                 type: boolean
 *     responses:
 *       200:
 *         description: C·∫≠p nh·∫≠t th√†nh c√¥ng
 *       400:
 *         description: Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t
 */
router.put('/:maSanPham', controller.update);

/**
 * @swagger
 * /api/sanpham/{maSanPham}:
 *   delete:
 *     summary: Xo√° s·∫£n ph·∫©m theo m√£
 *     tags: [S·∫£n ph·∫©m]
 *     parameters:
 *       - in: path
 *         name: maSanPham
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Xo√° th√†nh c√¥ng
 *       400:
 *         description: Kh√¥ng th·ªÉ xo√°
 */
router.delete('/:maSanPham', controller.delete);

module.exports = router;
